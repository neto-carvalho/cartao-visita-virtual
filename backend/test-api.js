const axios = require('axios');

const BASE_URL = 'http://localhost:5000';
let authToken = '';
let testUserId = '';
let testCardId = '';

console.log('üß™ Testando API do Cart√£o de Visita Virtual\n');

// Fun√ß√£o auxiliar para fazer requisi√ß√µes
async function makeRequest(method, url, data = null, token = null) {
    try {
        const config = {
            method,
            url: `${BASE_URL}${url}`,
            headers: {
                'Content-Type': 'application/json',
            }
        };

        if (token) {
            config.headers['Authorization'] = `Bearer ${token}`;
        }

        if (data) {
            config.data = data;
        }

        const response = await axios(config);
        return response.data;
    } catch (error) {
        return {
            success: false,
            message: error.response?.data?.message || error.message,
            status: error.response?.status
        };
    }
}

// Teste 1: Health Check
async function testHealthCheck() {
    console.log('üìã Teste 1: Health Check');
    const result = await makeRequest('GET', '/health');
    console.log('‚úÖ Health Check:', result.message || result.status);
    console.log('');
}

// Teste 2: Registro de usu√°rio
async function testRegister() {
    console.log('üìã Teste 2: Registro de usu√°rio');
    const userData = {
        name: 'Jo√£o Silva',
        email: `joao${Date.now()}@example.com`,
        password: 'senha123'
    };
    
    const result = await makeRequest('POST', '/api/auth/register', userData);
    
    if (result.success) {
        console.log('‚úÖ Usu√°rio registrado:', result.data.name);
        console.log(`   Email: ${result.data.email}`);
        console.log(`   ID: ${result.data.id}`);
    } else {
        console.log('‚ùå Erro ao registrar:', result.message);
    }
    console.log('');
}

// Teste 3: Login
async function testLogin() {
    console.log('üìã Teste 3: Login');
    const loginData = {
        email: 'joao@example.com',
        password: 'senha123'
    };
    
    const result = await makeRequest('POST', '/api/auth/login', loginData);
    
    if (result.success) {
        authToken = result.data.token;
        testUserId = result.data.user.id;
        console.log('‚úÖ Login realizado com sucesso!');
        console.log(`   Token: ${authToken.substring(0, 20)}...`);
        console.log(`   Usu√°rio: ${result.data.user.name}`);
    } else {
        console.log('‚ùå Erro no login:', result.message);
    }
    console.log('');
}

// Teste 4: Criar cart√£o
async function testCreateCard() {
    console.log('üìã Teste 4: Criar cart√£o');
    const cardData = {
        name: 'Jo√£o Silva',
        jobTitle: 'Desenvolvedor Full Stack',
        description: 'Especialista em desenvolvimento web moderno',
        email: 'joao@example.com',
        phone: '+55 11 98765-4321',
        color: '#00BFFF',
        theme: 'modern',
        links: [
            {
                title: 'LinkedIn',
                url: 'https://linkedin.com/in/joaosilva',
                type: 'linkedin'
            },
            {
                title: 'GitHub',
                url: 'https://github.com/joaosilva',
                type: 'custom'
            }
        ]
    };
    
    const result = await makeRequest('POST', '/api/cards', cardData, authToken);
    
    if (result.success) {
        testCardId = result.data._id;
        console.log('‚úÖ Cart√£o criado com sucesso!');
        console.log(`   ID: ${testCardId}`);
        console.log(`   Nome: ${result.data.name}`);
        console.log(`   Visualiza√ß√µes: ${result.data.views}`);
    } else {
        console.log('‚ùå Erro ao criar cart√£o:', result.message);
    }
    console.log('');
}

// Teste 5: Listar cart√µes
async function testGetCards() {
    console.log('üìã Teste 5: Listar cart√µes');
    const result = await makeRequest('GET', '/api/cards', null, authToken);
    
    if (result.success) {
        console.log(`‚úÖ Total de cart√µes: ${result.data.length}`);
        result.data.forEach((card, index) => {
            console.log(`   ${index + 1}. ${card.name} (${card.jobTitle})`);
        });
    } else {
        console.log('‚ùå Erro ao listar cart√µes:', result.message);
    }
    console.log('');
}

// Teste 6: Obter cart√£o espec√≠fico
async function testGetCard() {
    if (!testCardId) {
        console.log('‚ö†Ô∏è  Pulando teste - cart√£o n√£o foi criado');
        return;
    }
    
    console.log('üìã Teste 6: Obter cart√£o espec√≠fico');
    const result = await makeRequest('GET', `/api/cards/${testCardId}`, null, authToken);
    
    if (result.success) {
        console.log('‚úÖ Cart√£o obtido:');
        console.log(`   Nome: ${result.data.name}`);
        console.log(`   Links: ${result.data.links.length}`);
        console.log(`   Visualiza√ß√µes: ${result.data.views}`);
    } else {
        console.log('‚ùå Erro ao obter cart√£o:', result.message);
    }
    console.log('');
}

// Teste 7: Atualizar cart√£o
async function testUpdateCard() {
    if (!testCardId) {
        console.log('‚ö†Ô∏è  Pulando teste - cart√£o n√£o foi criado');
        return;
    }
    
    console.log('üìã Teste 7: Atualizar cart√£o');
    const updateData = {
        jobTitle: 'Desenvolvedor S√™nior Full Stack',
        phone: '+55 11 99999-8888'
    };
    
    const result = await makeRequest('PUT', `/api/cards/${testCardId}`, updateData, authToken);
    
    if (result.success) {
        console.log('‚úÖ Cart√£o atualizado:');
        console.log(`   Novo cargo: ${result.data.jobTitle}`);
        console.log(`   Novo telefone: ${result.data.phone}`);
    } else {
        console.log('‚ùå Erro ao atualizar cart√£o:', result.message);
    }
    console.log('');
}

// Teste 8: Visualiza√ß√£o p√∫blica
async function testPublicView() {
    if (!testCardId) {
        console.log('‚ö†Ô∏è  Pulando teste - cart√£o n√£o foi criado');
        return;
    }
    
    console.log('üìã Teste 8: Visualiza√ß√£o p√∫blica');
    const result = await makeRequest('GET', `/public/cards/${testCardId}`);
    
    if (result.success) {
        console.log('‚úÖ Visualiza√ß√£o p√∫blica funcionando:');
        console.log(`   Nome: ${result.data.name}`);
        console.log(`   Visualiza√ß√µes atualizadas: ${result.data.views}`);
    } else {
        console.log('‚ùå Erro na visualiza√ß√£o p√∫blica:', result.message);
    }
    console.log('');
}

// Teste 9: Deletar cart√£o (soft delete)
async function testDeleteCard() {
    if (!testCardId) {
        console.log('‚ö†Ô∏è  Pulando teste - cart√£o n√£o foi criado');
        return;
    }
    
    console.log('üìã Teste 9: Deletar cart√£o');
    const result = await makeRequest('DELETE', `/api/cards/${testCardId}`, null, authToken);
    
    if (result.success) {
        console.log('‚úÖ Cart√£o deletado com sucesso!');
    } else {
        console.log('‚ùå Erro ao deletar cart√£o:', result.message);
    }
    console.log('');
}

// Executar todos os testes
async function runAllTests() {
    try {
        await testHealthCheck();
        await testLogin();
        await testCreateCard();
        await testGetCards();
        await testGetCard();
        await testUpdateCard();
        await testPublicView();
        await testDeleteCard();
        
        console.log('üéâ Todos os testes conclu√≠dos!\n');
    } catch (error) {
        console.error('‚ùå Erro ao executar testes:', error.message);
    }
}

runAllTests();


